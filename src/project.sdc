# Shared constants, copied from  base.sdc  
set input_delay_value [ expr $::env(CLOCK_PERIOD) * $::env(IO_PCT) ]
set output_delay_value [ expr $::env(CLOCK_PERIOD) * $::env(IO_PCT) ]
set_max_fanout $::env(MAX_FANOUT_CONSTRAINT) [ current_design ]
set cap_load [ expr $::env(OUTPUT_CAP_LOAD) / 1000.0 ] ;# fF -> pF

set spi_inputs [list [get_ports "ui_in\[0\]"] [get_ports "ui_in\[2\]"]]
set clk_port [get_ports "clk"]
set ui_in1_port [get_ports "ui_in\[1\]"]
set all_inputs_temp [all_inputs]
set idx [lsearch $all_inputs_temp $clk_port]
if {$idx != -1} {
    set all_inputs_temp [lreplace $all_inputs_temp $idx $idx]
}
set idx [lsearch $all_inputs_temp $ui_in1_port]
if {$idx != -1} {
    set all_inputs_temp [lreplace $all_inputs_temp $idx $idx]
}
foreach port $spi_inputs {
    set idx [lsearch $all_inputs_temp $port]
    if {$idx != -1} {
        set all_inputs_temp [lreplace $all_inputs_temp $idx $idx]
    }
}
set non_io_clocks_and_spi_inputs $all_inputs_temp

set spi_outputs [get_ports "uo_out\[3\]"]
set all_outputs_temp [all_outputs]
set idx [lsearch $all_outputs_temp $spi_outputs]
if {$idx != -1} {
    set all_outputs_temp [lreplace $all_outputs_temp $idx $idx]
}
set non_spi_outputs $all_outputs_temp

#  clk   clock is generated by the RP2040 chip
create_clock [ get_ports "clk" ]  -name rp2040_clk -period $::env(CLOCK_PERIOD)
set_input_delay $input_delay_value -clock [ get_clocks rp2040_clk ] $non_io_clocks_and_spi_inputs
set_output_delay $output_delay_value -clock [ get_clocks rp2040_clk ] $non_spi_outputs
set_clock_uncertainty $::env(SYNTH_CLOCK_UNCERTAINTY) [ get_clocks rp2040_clk ]
set_clock_transition $::env(SYNTH_CLOCK_TRANSITION) [ get_clocks rp2040_clk ]

#  ui_in[1]   clock is generated by the FPGA
create_clock [ get_ports "ui_in\[1\]" ]  -name fpga_clk -period $::env(CLOCK_PERIOD)
set_input_delay $input_delay_value -clock [ get_clocks fpga_clk ] $spi_inputs
set_output_delay $output_delay_value -clock [ get_clocks fpga_clk ] $spi_outputs
set_clock_uncertainty $::env(SYNTH_CLOCK_UNCERTAINTY) [ get_clocks fpga_clk ]
set_clock_transition $::env(SYNTH_CLOCK_TRANSITION) [ get_clocks fpga_clk ]

# rp2040_clk  and  fpga_clk  are mesochronous, and they never interact
set_clock_groups -asynchronous -group { rp2040_clk } -group { fpga_clk }

# Miscellanea
set_driving_cell -lib_cell $::env(SYNTH_DRIVING_CELL) -pin $::env(SYNTH_DRIVING_CELL_PIN) [ all_inputs ]
set_load  $cap_load [ all_outputs ]
set_timing_derate -early [ expr {1-$::env(SYNTH_TIMING_DERATE)} ]
set_timing_derate -late [ expr {1+$::env(SYNTH_TIMING_DERATE)} ]
